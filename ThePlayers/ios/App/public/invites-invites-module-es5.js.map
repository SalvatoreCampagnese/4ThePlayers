{"version":3,"sources":["webpack:///src/app/invites/invites-routing.module.ts","webpack:///src/app/invites/invites.module.ts","webpack:///src/app/invites/invites.page.scss","webpack:///src/app/invites/invites.page.html","webpack:///src/app/invites/invites.page.ts"],"names":["routes","path","component","InvitesPageRoutingModule","imports","forChild","exports","InvitesPageModule","declarations","Storage","InvitesPage","env","router","http","authService","invitesListPending","invitesListSelected","get","key","then","data","value","token","decodedToken","userId","getInvites","baseUri","subscribe","resp","invites","length","invitesList","console","log","i","tournamentId","teamId","teamName","status","push","error","inviteObj","isLoading","patch","_id","newStatus","location","reload","window","alert","event","getToken","isLoggedIn","target","complete","navigateByUrl","selector","template"],"mappings":"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","file":"invites-invites-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { InvitesPage } from './invites.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: InvitesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class InvitesPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { InvitesPageRoutingModule } from './invites-routing.module';\n\nimport { InvitesPage } from './invites.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    InvitesPageRoutingModule\n  ],\n  declarations: [InvitesPage]\n})\nexport class InvitesPageModule {}\n","export default \".team-container {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  flex-direction: column;\\n}\\n.team-container .flex-direction-row {\\n  display: flex;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaW52aXRlcy9pbnZpdGVzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBRUEsc0JBQUE7QUFBSjtBQUNBO0VBQ0ksYUFBQTtFQUNBLHVCQUFBO0FBQ0oiLCJmaWxlIjoic3JjL2FwcC9pbnZpdGVzL2ludml0ZXMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRlYW0tY29udGFpbmVye1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4uZmxleC1kaXJlY3Rpb24tcm93eyAgXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxufSJdfQ== */\";","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n      <ion-badge color=\\\"danger\\\" class=\\\"badge-notifiche\\\" *ngIf=\\\"this.env.notificationsCounter + this.env.ticketUpdates\\\">\\r\\n        {{this.env.notificationsCounter + this.env.ticketUpdates}}</ion-badge>\\r\\n    </ion-buttons>\\r\\n    <ion-title>Inviti</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content style=\\\"--padding-top: 10px !important;\\\">\\r\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\r\\n    <ion-refresher-content></ion-refresher-content>\\r\\n  </ion-refresher>\\r\\n  <ion-text style=\\\"margin-left: 5px\\\">Inviti in sospeso</ion-text>\\r\\n  <ion-grid style=\\\"margin-bottom: 15px\\\">\\r\\n    <ion-text *ngIf=\\\"invitesListPending.length == 0\\\" color=\\\"danger\\\">Non hai nessun invito.\\r\\n    </ion-text>\\r\\n    <ion-row *ngFor=\\\"let invite of invitesListPending\\\">\\r\\n      <ion-col>\\r\\n        <ion-card color=\\\"white\\\" class=\\\"team-container\\\">\\r\\n          <ion-text>{{invite.teamName}}</ion-text>\\r\\n          <div class=\\\"flex-direction-row\\\">\\r\\n            <ion-button color=\\\"success\\\" (click)=\\\"changeInviteStatus(invite, 'ACCEPTED')\\\">ACCETTA</ion-button>\\r\\n            <ion-button color=\\\"danger\\\" (click)=\\\"changeInviteStatus(invite, 'DECLINED')\\\">RIFIUTA</ion-button>\\r\\n          </div>\\r\\n        </ion-card>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n\\r\\n  <ion-text style=\\\"margin-left: 5px\\\">Inviti accettati/rifiutati</ion-text>\\r\\n  <ion-grid>\\r\\n    <ion-text *ngIf=\\\"invitesListSelected.length == 0\\\" color=\\\"danger\\\">Non hai nessun invito.\\r\\n    </ion-text>\\r\\n    <ion-row *ngFor=\\\"let invite of invitesListSelected\\\">\\r\\n      <ion-col>\\r\\n        <ion-card color=\\\"white\\\" class=\\\"team-container\\\">\\r\\n          <ion-text>{{invite.teamName}}</ion-text>\\r\\n          <div class=\\\"flex-direction-row\\\">\\r\\n            <ion-text color=\\\"success\\\" *ngIf=\\\"invite.status === 'ACCEPTED'\\\">Accettato</ion-text>\\r\\n            <ion-text color=\\\"danger\\\" *ngIf=\\\"invite.status === 'DECLINED'\\\">Rifiutato</ion-text>\\r\\n          </div>\\r\\n        </ion-card>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n</ion-content>\";","import { Component, OnInit } from \"@angular/core\";\nimport { GlobalEnv } from \"../env\";\nimport { Plugins } from \"@capacitor/core\";\nconst { Storage } = Plugins;\nimport jwtDecode from \"jwt-decode\";\nimport { Router } from \"@angular/router\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { AuthService } from \"src/app/services/auth.service\";\n\n@Component({\n  selector: \"app-invites\",\n  templateUrl: \"./invites.page.html\",\n  styleUrls: [\"./invites.page.scss\"],\n})\nexport class InvitesPage implements OnInit {\n  invitesListPending: any = [];\n  invitesListSelected: any = [];\n  constructor(\n    public env: GlobalEnv,\n    private router: Router,\n    private http: HttpClient,\n    private authService: AuthService\n  ) {}\n\n  async ngOnInit() {\n    const token = await Storage.get({ key: \"token\" }).then((data) => {\n      if (data.value) {\n        return data.value;\n      }\n    });\n    const decodedToken = jwtDecode(token);\n    const userId = decodedToken[\"id\"];\n    if (userId) {\n      this.getInvites(userId);\n    }\n  }\n\n  getInvites(userId) {\n    this.http.get(this.env.baseUri + `/users/${userId}`).subscribe(\n      (resp) => {\n        if (resp && resp[\"user\"].invites && resp[\"user\"].invites.length) {\n          const invitesList = resp[\"user\"].invites;\n          console.log(invitesList);\n          for (let i = 0; i < invitesList.length; i++) {\n            const tournamentId = invitesList[i].tournamentId,\n              teamId = invitesList[i].teamId;\n            this.http\n              .get(\n                this.env.baseUri +\n                  `/tournaments/${tournamentId}/teams/${teamId}`\n              )\n              .subscribe(\n                (resp) => {\n                  invitesList[i].teamName = resp[\"name\"];\n                  if (invitesList[i].status === \"PENDING\") {\n                    this.invitesListPending.push(invitesList[i]);\n                  } else {\n                    this.invitesListSelected.push(invitesList[i]);\n                  }\n                },\n                (error) => {\n                  if (invitesList[i].status === \"PENDING\") {\n                    this.invitesListPending.push(invitesList[i]);\n                  } else {\n                    this.invitesListSelected.push(invitesList[i]);\n                  }\n                }\n              );\n          }\n        }\n      },\n      (error) => {\n        // Empty\n      }\n    );\n  }\n\n  async changeInviteStatus(inviteObj, status) {\n    this.env.isLoading = true;\n    const token = await Storage.get({ key: \"token\" }).then((data) => {\n      if (data.value) {\n        return data.value;\n      }\n    });\n    this.http\n      .patch(this.env.baseUri + `/invites/${inviteObj._id}`, {\n        newStatus: status,\n      })\n      .subscribe(\n        (resp) => {\n          this.env.isLoading = false;\n          location.reload();\n        },\n        (error) => {\n          window.alert(\"errore nell'accettare l'invito.\");\n        }\n      );\n  }\n\n  doRefresh(event) {\n    this.authService.getToken().then(() => {\n      if (this.authService.isLoggedIn) {\n        Storage.get({ key: \"token\" }).then((data) => {\n          const decodedToken = jwtDecode(data.value);\n          const userId = decodedToken[\"id\"];\n          if (userId) {\n            this.getInvites(userId);\n          }\n          event.target.complete();\n        });\n      } else {\n        this.router.navigateByUrl(\"/login\");\n      }\n    });\n  }\n}\n"]}